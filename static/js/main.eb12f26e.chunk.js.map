{"version":3,"sources":["Map.js","LineChart.js","SelectForm.js","App.js","serviceWorker.js","index.js"],"names":["initialViewState","latitude","longitude","zoom","maxZoom","minZoom","pitch","bearing","ambientLight","AmbientLight","color","intensity","dirLight","SunLight","timestamp","Date","UTC","_shadow","landCover","material","ambient","diffuse","shininess","specularColor","lightingEffect","LightingEffect","shadowColor","effects","Map","getTooltip","object","props","selectNeighborhood","id","html","ReactDOMServer","renderToStaticMarkup","properties","name","filterFeature","feature_id","geoJson3d","JSON","parse","stringify","geoJson","features","filter","feature","layers","GeoJsonLayer","data","this","opacity","stroked","filled","extruded","wireframe","getElevation","f","total","getFillColor","colorScale","getLineColor","pickable","PolygonLayer","getPolygon","featureId","Math","max","controller","width","height","reuseMaps","mapStyle","preventStyleDiffing","mapboxApiAccessToken","process","React","Component","LineChart","createLineChart","state","margin","x","d3","domain","range","y","nice","svg","svgNode","attr","selectAll","remove","append","call","ticks","tickSizeOuter","line","defined","d","isNaN","i","dates","path","series","join","values","on","preventDefault","mouse","xm","invert","ym","i1","i0","s","d3array","abs","raise","map","item","setState","ref","SelectForm","options","onSelectChange","option","value","getOption","length","find","label","sort","a","b","isMulti","onChange","maxTotal","scaleLinear","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kqnHASMA,EAAmB,CACrBC,SAAU,MACVC,WAAY,MACZC,KAAM,KACNC,QAAS,GACTC,QAAS,GACTC,MAAO,GACPC,QAAS,GAGPC,EAAe,IAAIC,IAAa,CAClCC,MAAO,CAAC,IAAK,IAAK,KAClBC,UAAW,IAGTC,EAAW,IAAIC,IAAS,CAC1BC,UAAWC,KAAKC,IAAI,KAAM,EAAG,GAAI,IACjCN,MAAO,CAAC,IAAK,IAAK,KAClBC,UAAW,EACXM,SAAS,IAGPC,EAAY,CAAC,CAAC,EAAE,KAAM,MAAO,EAAE,KAAM,MAAO,EAAE,KAAM,MAAO,EAAE,KAAM,QAEnEC,EAAW,CACbC,QAAS,IACTC,QAAS,GACTC,UAAW,GACXC,cAAe,CAAC,GAAI,GAAI,KAGtBC,EAAiB,IAAIC,IAAe,CAAEjB,eAAcI,aAC1DY,EAAeE,YAAc,CAAC,EAAG,EAAG,EAAG,IACvC,IAAMC,EAAU,CAACH,GAEII,E,4MAEjBC,WAAa,YAAiB,IAAdC,EAAa,EAAbA,OACZ,GAAIA,EAEA,OADA,EAAKC,MAAMC,mBAAmBF,EAAOG,IAC9B,CAAEC,KAAMC,IAAeC,qBAAqB,6BAAMN,EAAOO,WAAWC,QAE3E,EAAKP,MAAMC,mBAAmB,O,EAItCO,cAAgB,SAACC,GACb,IAAIC,EAAYC,KAAKC,MAAMD,KAAKE,UAAU,EAAKb,MAAMc,UAErD,OADAJ,EAAUK,SAAWL,EAAUK,SAASC,QAAO,SAACC,GAAD,OAAaA,EAAQf,KAAOO,KACpEC,G,uDAGD,IAAD,OACCQ,EAAS,CACX,IAAIC,IAAa,CACbjB,GAAI,UACJkB,KAAMC,KAAKrB,MAAMc,QACjBQ,QAAS,GACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,aAAc,SAAAC,GAAC,OAAyB,IAArBA,EAAEtB,WAAWuB,OAChCC,aAAc,SAAAF,GAAC,OAAI,EAAK5B,MAAM+B,WAAWH,EAAEtB,WAAWuB,QACtDG,aAAc,CAAC,IAAK,IAAK,KACzBC,UAAU,IAEd,IAAIC,IAAa,CACbhC,GAAI,SACJkB,KAAMjC,EACNoC,SAAS,EACTY,WAAY,SAAAP,GAAC,OAAIA,GACjBE,aAAc,CAAC,EAAG,EAAG,EAAG,KAE5B,IAAIX,IAAa,CACbjB,GAAI,YACJkB,KAAMC,KAAKb,cAAca,KAAKrB,MAAMoC,WACpCd,QAAS,EACTC,SAAS,EACTC,QAAQ,EACRC,UAAU,EACVC,WAAW,EACXC,aAAc,SAAAC,GAAC,OAAsC,IAAlCS,KAAKC,IAAIV,EAAEtB,WAAWuB,MAAO,IAChDC,aAAc,SAAAF,GAAC,OAAI,EAAK5B,MAAM+B,WAAWH,EAAEtB,WAAWuB,QACtDG,aAAc,CAAC,IAAK,IAAK,KACzB5C,WACA6C,UAAU,KAIlB,OACI,kBAAC,IAAD,CACIf,OAAQA,EACRtB,QAASA,EACT3B,iBAAkBA,EAClBsE,YAAY,EACZzC,WAAYuB,KAAKvB,WACjB0C,MAAM,OACNC,OAAO,QAEP,kBAAC,IAAD,CACIC,WAAS,EACTC,SAAS,kCACTC,qBAAqB,EACrBC,qBA1GCC,uG,GAqCYC,IAAMC,W,iBCxClBC,E,4MAEjBC,gBAAkB,WACd,IAAMjD,EAAqB,EAAKD,MAAMC,mBAChCmB,EAAO,EAAK+B,MAAM/B,KAGlBgC,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GAGjDC,EAAIC,cACLC,OAAO,CAAC,IAAIvE,KAAK,KAAM,EAAG,GAAI,IAAIA,KAAK,KAAM,EAAG,KAChDwE,MAAM,CAACJ,EAPE,IAOmBA,IAG3BK,EAAIH,gBACLC,OAAO,CAAC,EAAG,KAAKG,OAChBF,MAAM,CAXI,IAWMJ,EAAeA,IAG9BO,EAAML,SAAU,EAAKM,SAASC,KAAK,UAAW,CAAC,EAAG,EAf1C,IACC,MAiBfF,EAAIG,UAAU,KAAKC,SAGnBJ,EAAIK,OAAO,KACNH,KAAK,YADV,uBApBe,IAqBiCT,EADhD,MAEKa,KAAKX,aAAcD,GACfa,MAAMZ,YACNa,cAAc,IAGvBR,EAAIK,OAAO,KACNH,KAAK,YADV,oBACoCT,EADpC,SAEKa,KAAKX,WAAYG,IAGtB,IAAMW,EAAOd,SACRe,SAAQ,SAAAC,GAAC,OAAKC,MAAMD,MACpBjB,GAAE,SAACiB,EAAGE,GAAJ,OAAUnB,EAAE,EAAKF,MAAM/B,KAAKqD,MAAMD,OACpCf,GAAE,SAAAa,GAAC,OAAIb,EAAEa,MAGVI,EAAOf,EAAIK,OAAO,KACjBH,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,eAAgB,KACrBA,KAAK,kBAAmB,SACxBA,KAAK,iBAAkB,SACvBC,UAAU,QACV1C,KAAKA,EAAKuD,QACVC,KAAK,QACLf,KAAK,KAAK,SAAAS,GAAC,OAAIF,EAAKE,EAAEO,WACtBhB,KAAK,UAAU,SAAAS,GAAC,OAAI,EAAKtE,MAAMoC,UAAY,OAASkB,MAAA,MAAAA,EAAE,YAAQ,EAAKtD,MAAM+B,WAAWuC,EAAEzC,YAqB3F6C,EAAKI,GAAG,aAnBJ,WACIxB,QAASyB,iBACT,IAAMC,EAAQ1B,QAASjC,MACjB4D,EAAK5B,EAAE6B,OAAOF,EAAM,IACpBG,EAAK1B,EAAEyB,OAAOF,EAAM,IAGpBI,EAAK9B,aAAclC,EAAKqD,MAAOQ,EAAI,GACnCI,EAAKD,EAAK,EAGVZ,EAAIS,EAAK7D,EAAKqD,MAAMY,GAAMjE,EAAKqD,MAAMW,GAAMH,EAAKG,EAAKC,EACrDC,EAAIC,IAAcnE,EAAKuD,QAAQ,SAAAL,GAAC,OAAIjC,KAAKmD,IAAIlB,EAAEO,OAAOL,GAAKW,MAGjElF,EAAmBqF,EAAEpF,OAO7BwE,EAAK1D,QAAO,SAAAsD,GAAC,OAAIA,EAAEpE,KAAO,EAAKF,MAAMoC,aAChCyB,KAAK,UAAU,SAAAS,GAAC,OAAIhB,MAAA,MAAAA,EAAE,YAAQ,EAAKtD,MAAM+B,WAAWuC,EAAEzC,YACtDgC,KAAK,eAAgB,KACrB4B,S,kEAIY,IAAD,OACVrE,EAAO,CACTuD,OAAQtD,KAAKrB,MAAMc,QAAQC,SAAS2E,KAAI,SAAA9D,GACpC,IAAM+D,EAAO/D,EAAEtB,WACf,MAAO,CACHC,KAAMoF,EAAKpF,KACXL,GAAI0B,EAAE1B,GACN2B,MAAO8D,EAAK9D,MACZgD,OAAQ,CAACc,EAAK,MAAOA,EAAK,MAAOA,EAAK,MAAOA,EAAK,MAAOA,EAAK,WAGtElB,MAAO,CACH,IAAIzF,KAAK,KAAM,EAAG,GAClB,IAAIA,KAAK,KAAM,EAAG,GAClB,IAAIA,KAAK,KAAM,EAAG,GAClB,IAAIA,KAAK,KAAM,EAAG,GAClB,IAAIA,KAAK,KAAM,EAAG,KAI1BqC,KAAKuE,SAAS,CAAExE,SAAQ,WACpB,EAAK8B,uB,2CAKT7B,KAAK6B,oB,+BAGC,IAAD,OACL,OACI,yBACI2C,IAAK,SAAAjC,GAAO,OAAI,EAAKA,QAAUA,GAC/BpB,MAAM,OACNC,OAAO,Y,GAvHgBM,IAAMC,W,SCDxB8C,E,4MAEjB3C,MAAQ,CACJ4C,QAAS,I,EAmBbC,eAAiB,SAACC,GACd,EAAKjG,MAAMC,mBAAmBgG,EAAOC,Q,EAGzCC,UAAY,WACR,GAAI,EAAKhD,MAAM4C,QAAQK,OACnB,OAAO,EAAKjD,MAAM4C,QAAQM,MAAK,SAAA/B,GAAC,OAAIA,EAAE4B,QAAU,EAAKlG,MAAMoC,cAAc,M,kEArB7E,IAAM2D,EAAU1E,KAAKrB,MAAMc,QAAQC,SAAS2E,KAAI,SAAAzE,GAC5C,IAAM0E,EAAO1E,EAAQX,WACrB,MAAO,CACHgG,MAAM,GAAD,OAAKX,EAAKpF,KAAV,aAAmB8B,KAAKC,IAAI,EAAGqD,EAAK9D,QACzCqE,MAAOjF,EAAQf,GACf2B,MAAO8D,EAAK9D,UAGpBR,KAAKuE,SAAS,CACVG,QAASA,EAAQQ,MAAK,SAACC,EAAGC,GACtB,OAAOA,EAAE5E,MAAQ2E,EAAE3E,a,+BAgB3B,OACI,kBAAC,IAAD,CACI6E,SAAS,EACTC,SAAUtF,KAAK2E,eACfD,QAAS1E,KAAK8B,MAAM4C,QACpBG,MAAO7E,KAAK8E,kB,GAtCYpD,IAAMC,W,kBCKxC4D,EAAWvE,KAAKC,IAAL,MAAAD,KAAI,YAAQvB,EAAQC,SAAS2E,KAAI,SAAApB,GAAC,OAAIA,EAAEhE,WAAWuB,WAC9DE,EAAa8E,cACdtD,OAAO,CAAC,EAAGqD,IACXpD,MAAM,CAAC,CAAC,IAAK,IAAK,KAAM,CAAC,IAAK,GAAI,MAwDxBsD,E,4MApDX3D,MAAQ,CACJf,UAAW,I,EAGfnC,mBAAqB,SAACmC,GAClB,EAAKwD,SAAS,CAAExD,e,uDAIhB,OACI,yBAAK2E,UAAU,UACX,yBAAKA,UAAU,OACX,kBAAC,EAAD,CACIjG,QAASA,EACTsB,UAAWf,KAAK8B,MAAMf,UACtBnC,mBAAoBoB,KAAKpB,mBACzB8B,WAAYA,KAEpB,yBAAKgF,UAAU,WACX,yBAAKA,UAAU,UACX,0DAGA,2BACI,yDAEJ,yMAKA,8FAGA,kBAAC,EAAD,CACIjG,QAASA,EACTsB,UAAWf,KAAK8B,MAAMf,UACtBnC,mBAAoBoB,KAAKpB,mBACzB8B,WAAYA,KAEpB,kBAAC,EAAD,CACIjB,QAASA,EACTsB,UAAWf,KAAK8B,MAAMf,UACtBnC,mBAAoBoB,KAAKpB,mBACzB8B,WAAYA,U,GA9ClBgB,IAAMC,WCDJgE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,SD2HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eb12f26e.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport { StaticMap } from 'react-map-gl';\nimport DeckGL from '@deck.gl/react';\nimport { GeoJsonLayer, PolygonLayer } from '@deck.gl/layers';\nimport { LightingEffect, AmbientLight, _SunLight as SunLight } from '@deck.gl/core';\n\nconst MAPBOX_TOKEN = process.env.REACT_APP_MAPBOX_TOKEN; // eslint-disable-line\n\nconst initialViewState = {\n    latitude: 38.87,\n    longitude: -77.03,\n    zoom: 10.5,\n    maxZoom: 11,\n    minZoom: 10,\n    pitch: 45,\n    bearing: 0\n};\n\nconst ambientLight = new AmbientLight({\n    color: [255, 255, 255],\n    intensity: 1.0\n});\n\nconst dirLight = new SunLight({\n    timestamp: Date.UTC(2019, 8, 21, 18),\n    color: [255, 255, 255],\n    intensity: 1.0,\n    _shadow: true\n});\n\nconst landCover = [[[-75.9, 38.7], [-75.9, 39.2], [-77.5, 39.2], [-77.5, 38.7]]];\n\nconst material = {\n    ambient: 0.64,\n    diffuse: 0.6,\n    shininess: 32,\n    specularColor: [51, 51, 51]\n};\n\nconst lightingEffect = new LightingEffect({ ambientLight, dirLight });\nlightingEffect.shadowColor = [0, 0, 0, 0.5];\nconst effects = [lightingEffect];\n\nexport default class Map extends React.Component {\n\n    getTooltip = ({ object }) => {\n        if (object) {\n            this.props.selectNeighborhood(object.id);\n            return { html: ReactDOMServer.renderToStaticMarkup(<div>{object.properties.name}</div>) };\n        } else {\n            this.props.selectNeighborhood(null);\n        }\n    }\n\n    filterFeature = (feature_id) => {\n        let geoJson3d = JSON.parse(JSON.stringify(this.props.geoJson));\n        geoJson3d.features = geoJson3d.features.filter((feature) => feature.id === feature_id);\n        return geoJson3d;\n    }\n\n    render() {\n        const layers = [\n            new GeoJsonLayer({\n                id: 'geojson',\n                data: this.props.geoJson,\n                opacity: 0.8,\n                stroked: false,\n                filled: true,\n                extruded: false,\n                wireframe: true,\n                getElevation: f => f.properties.total * 200,\n                getFillColor: f => this.props.colorScale(f.properties.total),\n                getLineColor: [255, 255, 255],\n                pickable: true\n            }),\n            new PolygonLayer({\n                id: 'ground',\n                data: landCover,\n                stroked: false,\n                getPolygon: f => f,\n                getFillColor: [0, 0, 0, 0]\n            }),\n            new GeoJsonLayer({\n                id: 'geojson3d',\n                data: this.filterFeature(this.props.featureId),\n                opacity: 1,\n                stroked: false,\n                filled: true,\n                extruded: true,\n                wireframe: true,\n                getElevation: f => Math.max(f.properties.total, 1) * 150,\n                getFillColor: f => this.props.colorScale(f.properties.total),\n                getLineColor: [255, 255, 255],\n                material,\n                pickable: true\n            })\n        ];\n\n        return (\n            <DeckGL\n                layers={layers}\n                effects={effects}\n                initialViewState={initialViewState}\n                controller={true}\n                getTooltip={this.getTooltip}\n                width=\"100%\"\n                height=\"100%\"\n            >\n                <StaticMap\n                    reuseMaps\n                    mapStyle='mapbox://styles/mapbox/light-v9'\n                    preventStyleDiffing={true}\n                    mapboxApiAccessToken={MAPBOX_TOKEN}\n                />\n            </DeckGL>\n        );\n    }\n\n}\n","import React from 'react';\nimport * as d3 from 'd3';\nimport * as d3array from 'd3-array';\n\nexport default class LineChart extends React.Component {\n\n    createLineChart = () => {\n        const selectNeighborhood = this.props.selectNeighborhood;\n        const data = this.state.data;\n        const width = 500;\n        const height = 400;\n        const margin = { top: 30, right: 20, bottom: 30, left: 30 };\n\n        // X-axis scale, year\n        const x = d3.scaleTime()\n            .domain([new Date(2010, 0, 1), new Date(2014, 0, 1)])\n            .range([margin.left, width - margin.right]);\n\n        // Y-axis scale, count of accidents\n        const y = d3.scaleLinear()\n            .domain([0, 12]).nice()\n            .range([height - margin.bottom, margin.top]);\n\n        // Select svg and in React DOM ref\n        const svg = d3.select(this.svgNode).attr(\"viewBox\", [0, 0, width, height]);\n\n        // Clear existing paths\n        svg.selectAll(\"*\").remove();\n\n        // Add X-axis to SVG\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(0, ${height - margin.bottom})`)\n            .call(d3.axisBottom(x)\n                .ticks(d3.timeYear)\n                .tickSizeOuter(0));\n\n        // Add Y-axis to SVG\n        svg.append(\"g\")\n            .attr(\"transform\", `translate(${margin.left}, 0)`)\n            .call(d3.axisLeft(y));\n\n        // Line drawing function for series\n        const line = d3.line()\n            .defined(d => !isNaN(d))\n            .x((d, i) => x(this.state.data.dates[i]))\n            .y(d => y(d))\n\n        // Create paths for each series\n        let path = svg.append(\"g\")\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke\", \"#DC143C\")\n            .attr(\"stroke-width\", 1.5)\n            .attr(\"stroke-linejoin\", \"round\")\n            .attr(\"stroke-linecap\", \"round\")\n            .selectAll(\"path\")\n            .data(data.series)\n            .join(\"path\")\n            .attr(\"d\", d => line(d.values))\n            .attr(\"stroke\", d => this.props.featureId ? \"#eee\" : d3.rgb(...this.props.colorScale(d.total)));\n\n            function moved() {\n                d3.event.preventDefault();\n                const mouse = d3.mouse(this);\n                const xm = x.invert(mouse[0]);\n                const ym = y.invert(mouse[1]);\n    \n                // Find the closest X to mouse\n                const i1 = d3.bisectLeft(data.dates, xm, 1);\n                const i0 = i1 - 1;\n    \n                // Find the closest Y to mouse\n                const i = xm - data.dates[i0] > data.dates[i1] - xm ? i1 : i0;\n                const s = d3array.least(data.series, d => Math.abs(d.values[i] - ym));\n    \n                // Select the closest path\n                selectNeighborhood(s.id);\n            }\n\n        // Bind mouse movement to moved handler\n        path.on(\"mousemove\", moved);\n\n        // Change series style when a neighborhood is selected\n        path.filter(d => d.id === this.props.featureId)\n            .attr(\"stroke\", d => d3.rgb(...this.props.colorScale(d.total)))\n            .attr(\"stroke-width\", 3.5)\n            .raise();\n\n    }\n\n    componentDidMount() {\n        const data = {\n            series: this.props.geoJson.features.map(f => {\n                const item = f.properties;\n                return {\n                    name: item.name,\n                    id: f.id,\n                    total: item.total,\n                    values: [item[2010], item[2011], item[2012], item[2013], item[2014]]\n                };\n            }),\n            dates: [\n                new Date(2010, 0, 1),\n                new Date(2011, 0, 1),\n                new Date(2012, 0, 1),\n                new Date(2013, 0, 1),\n                new Date(2014, 0, 1)\n            ]\n        };\n\n        this.setState({ data }, () => {\n            this.createLineChart();\n        });\n    }\n\n    componentDidUpdate() {\n        this.createLineChart();\n    }\n\n    render() {\n        return (\n            <svg\n                ref={svgNode => this.svgNode = svgNode}\n                width=\"100%\"\n                height=\"400\">\n            </svg>);\n    }\n\n}\n","import React from 'react';\nimport Select from 'react-select';\n\nexport default class SelectForm extends React.Component {\n\n    state = {\n        options: []\n    }\n\n    componentDidMount() {\n        const options = this.props.geoJson.features.map(feature => {\n            const item = feature.properties;\n            return {\n                label: `${item.name}: ${Math.max(0, item.total)}`,\n                value: feature.id,\n                total: item.total\n            };\n        });\n        this.setState({\n            options: options.sort((a, b) => {\n                return b.total - a.total;\n            })\n        });\n    }\n\n    onSelectChange = (option) => {\n        this.props.selectNeighborhood(option.value);\n    }\n\n    getOption = () => {\n        if (this.state.options.length) {\n            return this.state.options.find(d => d.value === this.props.featureId) || null;\n        }\n    }\n\n    render() {\n        return (\n            <Select\n                isMulti={false}\n                onChange={this.onSelectChange}\n                options={this.state.options}\n                value={this.getOption()}\n            />);\n    }\n\n}","import React from 'react';\nimport { scaleLinear } from 'd3-scale';\nimport Map from './Map';\nimport LineChart from './LineChart';\nimport SelectForm from './SelectForm';\nimport './App.css';\nimport geoJson from './annotatedData.geo.json';\n\nconst maxTotal = Math.max(...geoJson.features.map(d => d.properties.total));\nconst colorScale = scaleLinear()\n    .domain([0, maxTotal])\n    .range([[220, 180, 180], [220, 20, 60]]);\n\nclass App extends React.Component {\n\n    state = {\n        featureId: \"\"\n    }\n\n    selectNeighborhood = (featureId) => {\n        this.setState({ featureId });\n    }\n\n    render() {\n        return (\n            <div className=\"parent\">\n                <div className=\"map\">\n                    <Map\n                        geoJson={geoJson}\n                        featureId={this.state.featureId}\n                        selectNeighborhood={this.selectNeighborhood}\n                        colorScale={colorScale} />\n                </div>\n                <div className=\"sidebar\">\n                    <div className=\"header\">\n                        <h2>\n                            Impaired Traffic Accidents\n                        </h2>\n                        <p>\n                            <em>Washington DC, 2010-2014</em>\n                        </p>\n                        <p>\n                            This interactive data visualization shows the number of impaired\n                            traffic accidents in Washington DC over the five-year period of 2010-2014, separated out\n                            by neighborhood.\n                        </p>\n                        <p>\n                            Use the map, dropdown menu, or chart to filter by neighborhood.\n                        </p>\n                        <SelectForm\n                            geoJson={geoJson}\n                            featureId={this.state.featureId}\n                            selectNeighborhood={this.selectNeighborhood}\n                            colorScale={colorScale} />\n                    </div>\n                    <LineChart\n                        geoJson={geoJson}\n                        featureId={this.state.featureId}\n                        selectNeighborhood={this.selectNeighborhood}\n                        colorScale={colorScale} />\n                </div>\n            </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}